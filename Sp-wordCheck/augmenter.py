import speech_recognition as sr
import os
import time
from collections import deque

class RealTimeAugmenter:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Real-time Augmenter ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢
    """
    # --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Configuration) ---
    def __init__(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.FILLER_WORDS = ["‡πÄ‡∏≠‡πà‡∏≠", "‡∏≠‡πà‡∏≤", "‡πÅ‡∏ö‡∏ö‡∏ß‡πà‡∏≤", "‡∏Ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤", "‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠", "‡πÅ‡∏ö‡∏ö"]
        self.KEYWORD_TRIGGERS = {
            "‡∏£‡∏≤‡∏Ñ‡∏≤": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 50,000 ‡∏ö‡∏≤‡∏ó ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏•‡∏î 10%",
            "‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó A ‡πÅ‡∏•‡∏∞ B ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢",
            "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå X": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå X ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ 75% ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
        }
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î (WPM)
        self.WPM_SLOW_THRESHOLD = 110
        self.WPM_FAST_THRESHOLD = 160
        self.PACING_WINDOW_SECONDS = 5
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (State)
        self.filler_word_counts = {word: 0 for word in self.FILLER_WORDS}
        self.pacing_word_count = 0
        self.pacing_start_time = time.time()
        self.spoken_text_history = set()
        self.live_transcript = deque(maxlen=3) # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        self.triggered_keywords_log = deque(maxlen=5) # ‡πÄ‡∏Å‡πá‡∏ö Keyword ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Speech Recognition
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        # *‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô*
        self.recognizer.pause_threshold = 0.6      # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î‡∏à‡∏ö (‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ 0.üòé
        self.recognizer.non_speaking_duration = 0.4 # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î (‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ 0.5)

    def _clear_screen(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Terminal"""
        os.system('cls' if os.name == 'nt' else 'clear')

    def _display_dashboard(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"""
        self._clear_screen()
        print("="*60)
        print("--- üöÄ The Pro Co-pilot: Real-time Augmenter üöÄ ---")
        print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á... (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)")
        print("="*60)

        # --- Live Transcript ---
        print("\nüìú Live Transcript (‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î):")
        if not self.live_transcript:
            print("   ...")
        else:
            for i, text in enumerate(self.live_transcript):
                print(f"   - {text}")
        
        # --- Filler Word Counter ---
        print("\nüìä ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ü‡∏∏‡πà‡∏°‡πÄ‡∏ü‡∏∑‡∏≠‡∏¢ (Filler Words):")
        total_fillers = sum(self.filler_word_counts.values())
        if total_fillers > 0:
            for word, count in self.filler_word_counts.items():
                if count > 0:
                    print(f"   - {word}: {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        else:
            print("   ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ü‡∏∏‡πà‡∏°‡πÄ‡∏ü‡∏∑‡∏≠‡∏¢")
            
        # --- Pacing Feedback ---
        print("\nüèÉ‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î (Pacing):")
        elapsed_time = time.time() - self.pacing_start_time
        if elapsed_time > 1 and self.pacing_word_count > 0:
            wpm = (self.pacing_word_count / elapsed_time) * 60
            feedback = "‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ"
            if wpm < self.WPM_SLOW_THRESHOLD:
                feedback = "üê¢ ‡∏ä‡πâ‡∏≤‡πÑ‡∏õ"
            elif wpm > self.WPM_FAST_THRESHOLD:
                feedback = "üöÄ ‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏õ"
            print(f"   ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {int(wpm)} WPM ({feedback})")
        else:
            print("   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")

        # --- Keyword Trigger Log ---
        print("\nüîî Keyword ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:")
        if not self.triggered_keywords_log:
            print("   ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö Keyword ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ")
        else:
             for log in self.triggered_keywords_log:
                print(log)

        print("\n"+"-"*60)

    def _process_text(self, text):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà"""
        words = text.split()
        if not words:
            return

        self.live_transcript.append(text)
        
        # 1. ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ü‡∏∏‡πà‡∏°‡πÄ‡∏ü‡∏∑‡∏≠‡∏¢
        for word in words:
            if word in self.FILLER_WORDS:
                self.filler_word_counts[word] += 1
        
        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        self.pacing_word_count += len(words)

        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Keyword
        for keyword, info in self.KEYWORD_TRIGGERS.items():
            if keyword in text and keyword not in self.spoken_text_history:
                log_message = f"   üéØ '{keyword}': {info}"
                self.triggered_keywords_log.append(log_message)
                self.spoken_text_history.add(keyword)

    def _audio_callback(self, recognizer, audio):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ"""
        try:
            text = recognizer.recognize_google(audio, language="th-TH")
            self._process_text(text)
        except sr.UnknownValueError:
            pass # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        except sr.RequestError as e:
            error_log = f"   [!] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"
            self.triggered_keywords_log.append(error_log)

    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô")
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=2)
        print("‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        time.sleep(1)

        stop_listening = self.recognizer.listen_in_background(self.microphone, self._audio_callback)
        
        try:
            while True:
                self._display_dashboard()
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
                if time.time() - self.pacing_start_time > self.PACING_WINDOW_SECONDS:
                    self.pacing_start_time = time.time()
                    self.pacing_word_count = 0
                time.sleep(0.5) # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        except KeyboardInterrupt:
            print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
            stop_listening(wait_for_stop=False)
            print("‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö!")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ---
if __name__ == "__main__":
    augmenter = RealTimeAugmenter()
    augmenter.run()